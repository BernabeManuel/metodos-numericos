import numpy as np
import pandas as pd
import tkinter as tk
from tkinter import ttk, messagebox
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

# Función segura para evaluar expresiones matemáticas
def evaluar_funcion_segura(expr, valor_x):
    variables_permitidas = {
        "x": valor_x,
        "np": np,
        "sin": np.sin,
        "cos": np.cos,
        "tan": np.tan,
        "exp": np.exp,
        "log": np.log,
        "sqrt": np.sqrt,
        "abs": abs,
        "pi": np.pi,
        "e": np.e,
    }
    try:
        return eval(expr, {"__builtins__": None}, variables_permitidas)
    except Exception as error:
        raise ValueError(f"No se pudo evaluar la función: {error}")

# Implementación del método de la secante
def metodo_secante(funcion, punto1, punto2, tolerancia, max_intentos=100):
    resultados = []
    try:
        valor_f1 = evaluar_funcion_segura(funcion, punto1)
        valor_f2 = evaluar_funcion_segura(funcion, punto2)
    except Exception as exc:
        messagebox.showerror("Error", f"Error al evaluar en los puntos iniciales: {exc}")
        return None

    for intento in range(max_intentos):
        if valor_f2 - valor_f1 == 0:
            messagebox.showerror("Error", "División entre cero en el proceso de cálculo.")
            return None

        nuevo_punto = punto2 - valor_f2 * (punto2 - punto1) / (valor_f2 - valor_f1)
        valor_fnuevo = evaluar_funcion_segura(funcion, nuevo_punto)

        resultados.append({"p1": punto1, "p2": punto2, "raiz": nuevo_punto, "f(raiz)": valor_fnuevo})

        if abs(valor_fnuevo) < tolerancia:
            break

        punto1, valor_f1 = punto2, valor_f2
        punto2, valor_f2 = nuevo_punto, valor_fnuevo

    return resultados

# Ejecutar el método y mostrar resultados
def calcular_raiz_secante():
    funcion_ingresada = entrada_funcion.get()
    try:
        punto_inicial1 = float(entrada_x0.get())
        punto_inicial2 = float(entrada_x1.get())
        tolerancia = float(entrada_error.get())
    except ValueError:
        messagebox.showerror("Error", "Por favor, ingresa valores numéricos válidos.")
        return
    
    datos_iteracion = metodo_secante(funcion_ingresada, punto_inicial1, punto_inicial2, tolerancia)
    if datos_iteracion is None or len(datos_iteracion) == 0:
        return
    
    tabla_resultados.delete(*tabla_resultados.get_children())
    
    for idx, fila in enumerate(datos_iteracion, start=1):
        tabla_resultados.insert("", "end", values=(
            idx, f"{fila['p1']:.6f}", f"{fila['p2']:.6f}",
            f"{fila['raiz']:.6f}", f"{fila['f(raiz)']:.6f}"
        ))
    
    raiz_aproximada = datos_iteracion[-1]['raiz']
    etiqueta_resultado.config(text=f"Raíz encontrada: {raiz_aproximada:.8f}")
    
    puntos_x = np.linspace(punto_inicial1, punto_inicial2, 400)
    try:
        puntos_y = evaluar_funcion_segura(funcion_ingresada, puntos_x)
    except Exception as err:
        messagebox.showerror("Error", f"No fue posible graficar la función: {err}")
        return
    
    grafica.clear()
    grafica.plot(puntos_x, puntos_y, label=f"f(x) = {funcion_ingresada}")
    grafica.axhline(0, color='gray', linewidth=0.7)
    grafica.axvline(raiz_aproximada, color='red', linestyle='--', label=f"Raíz ≈ {raiz_aproximada:.6f}")
    grafica.legend()
    grafica.grid(True)
    canvas_grafica.draw()

# Configuración de la ventana principal
ventana = tk.Tk()
ventana.title("Cálculo de Raíces con la Secante")

marco_entradas = tk.Frame(ventana)
marco_entradas.pack(pady=10)

tk.Label(marco_entradas, text="Función f(x):").grid(row=0, column=0)
entrada_funcion = tk.Entry(marco_entradas, width=40)
entrada_funcion.grid(row=0, column=1, columnspan=4)
entrada_funcion.insert(0, "x**3 - x**2 + 2")

tk.Label(marco_entradas, text="x0:").grid(row=1, column=0)
entrada_x0 = tk.Entry(marco_entradas, width=10)
entrada_x0.grid(row=1, column=1)
entrada_x0.insert(0, "-10")

tk.Label(marco_entradas, text="x1:").grid(row=1, column=2)
entrada_x1 = tk.Entry(marco_entradas, width=10)
entrada_x1.grid(row=1, column=3)
entrada_x1.insert(0, "10")

tk.Label(marco_entradas, text="Tolerancia e:").grid(row=1, column=4)
entrada_error = tk.Entry(marco_entradas, width=10)
entrada_error.grid(row=1, column=5)
entrada_error.insert(0, "0.01")

boton_calcular = tk.Button(ventana, text="Obtener Raíz", command=calcular_raiz_secante)
boton_calcular.pack(pady=5)

columnas_tabla = ("#", "x0", "x1", "Raíz", "f(Raíz)")
tabla_resultados = ttk.Treeview(ventana, columns=columnas_tabla, show="headings", height=10)
for col in columnas_tabla:
    tabla_resultados.heading(col, text=col)
    tabla_resultados.column(col, width=100, anchor='center')
tabla_resultados.pack(pady=10)

etiqueta_resultado = tk.Label(ventana, text="Raíz encontrada:")
etiqueta_resultado.pack(pady=5)

figura, grafica = plt.subplots(figsize=(6, 4))
canvas_grafica = FigureCanvasTkAgg(figura, master=ventana)
canvas_grafica.get_tk_widget().pack()

ventana.mainloop()
